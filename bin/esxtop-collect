#!/bin/pythonu
from subprocess import Popen, PIPE
from datetime import datetime, timedelta
from time import mktime
import urllib.request, urllib.parse, urllib.error
import urllib.request, urllib.error, urllib.parse
import signal
import re
import os
p = 0
influxdb_server = '192.168.1.20:8086'
influxdb_dbname = 'esxi'
data = ''
def sigterm_handler(_signo, _stack_frame):
	print(("Received signal", _signo))
	if len(data) > 0:
		print("Writing data")
		writedata()
	os.kill( p.pid, signal.SIGTERM)
	exit(0)
signal.signal(signal.SIGTERM, sigterm_handler)
timezone = timedelta(hours=3)


def main ():
	global p, data
	p = Popen(['/bin/esxtop', '-b', '-l'
	, '-n', '61'
	], bufsize=1, stdout=PIPE , universal_newlines=True)
	start = False
	head = []
	indexes = []
	vcpuindexes = {}
	data = ''
	for line in iter(p.stdout.readline, ''):
		line = line.split(',')
		if start:
			date = datetime.strptime(line[0], '"%m/%d/%Y %H:%M:%S"')
			date = int(mktime(date.timetuple())) * 1000000000
			for i in indexes: 
				data += "%s,%s value=%s %s\n" % (head[i]['metric'], head[i]['tags'], line[i].replace('"', ''), date)
			for i_vm in vcpuindexes: 
				for i_vcpu in vcpuindexes[i_vm]: 
					values = ''
					delim = ''
					for i_vstat in vcpuindexes[i_vm][i_vcpu]: 
						values += '%s%s=%s' % (delim, i_vstat, line[vcpuindexes[i_vm][i_vcpu][i_vstat]].replace('"', ''))
						delim = ','
					data += "vcpu,host=%s,vm=%s,vcpu=%s %s %s\n" % (head[vcpuindexes[i_vm][i_vcpu][i_vstat]]['host'],i_vm, i_vcpu, values, date)
			writedata()
			
		else:
			line_len = len(line)
			head = line
			for i in range(line_len):
				m = re.match( r'"\\\\(.+?)\\(.+?)(?:\((.+?)\)|(?:))\\(.+)"', head[i])
				if m:
					if m.group(2) == "Virtual Disk" and m.group(3).find(':') > 0:
						start = True
						indexes.append(i)
						s = m.group(3).replace(' ', '\\ ').split(':', 1)
						head[i] = {'metric' : m.group(4).replace(' ', '\\ '),
									'tags' : "stat_type=%s,host=%s,vm=%s,device=%s" % (m.group(2).replace(' ', '\\ '), m.group(1).replace(' ', '\\ '), s[0], s[1])}
					elif m.group(2) == "Network Port":
						start = True
						indexes.append(i)
						s = m.group(3).replace(' ', '\\ ').split(':')
						head[i] = {'metric' : m.group(4).replace(' ', '\\ '),
									'tags' : "stat_type=%s,host=%s,switch=%s,device=%s" % (m.group(2).replace(' ', '\\ '), m.group(1).replace(' ', '\\ '), s[0], s[-1])}
					elif m.group(2) == "Vcpu" and m.group(3).find('vmx-vcpu') > 0:
							start = True
							s = m.group(3).replace(':vmx-', ':').replace(' ', '\\ ').split(':')
							if s[-1] not in vcpuindexes:
								vcpuindexes[s[-1]] = {}
							if s[-2] not in vcpuindexes[s[-1]]:
								vcpuindexes[s[-1]][s[-2]] = {}
							vcpuindexes[s[-1]][s[-2]][m.group(4).replace('% ', '').replace(' ', '')] = i
							head[i] = {'host' : m.group(1).replace(' ', '\\ ')}
							
def writedata():
	global data
	try:
		binary_data = data.encode()
		r = urllib.request.Request('http://%s/write?db=%s' % (influxdb_server, influxdb_dbname), binary_data)#, {'Content-Type': 'application/octet-stream'})
		r.add_header('Content-Length', '%d' % len(binary_data))
		r.add_header('Content-Type', 'application/octet-stream')
		urllib.request.urlopen(r)
		data = ''
		binary_data = ''
	except Exception as e:
		print(e)
		print(("Data buffer len:" + str(len(data))))
	if len(data) > 104857600:
		data = ''



if __name__ == "__main__":
	try:
		while True:
			main()
	except KeyboardInterrupt:
		sigterm_handler("Ctrl+C", 0)
